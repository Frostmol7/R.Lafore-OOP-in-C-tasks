#include <iostream>
#include <cmath>
using namespace std;

class fraction
{
public:
	fraction() : num(0), den(0) {}
	fraction(int a, int b) : num(a), den(b) {}

	void get()
	{
		int denu, nume;
		char tmp;
		cout << "Enter numerator/denominator: ";
		cin >> nume >> tmp >> denu;
		num = nume;
		den = denu;
	}

	void add(fraction b)
	{
		num = num * b.den + b.num * den;
		den = den * b.den;

		lowterms();
	}

	void sub(fraction b)
	{
		num = num * b.den - b.num * den;
		den = den * b.den;
		
		lowterms();
	}

	void mul(fraction b)
	{
		num= num* b.num;
		den= den* b.den;

		lowterms();
	}

	void div(fraction b)
	{
		num = num * b.den;
		den = den * b.num; 

		lowterms();
	}


	void lowterms() // change ourself to lowest terms
	{
		long tnum, tden, temp, gcd;
		tnum = labs(num); // use non-negative copies
		tden = labs(den); // (needs cmath)
		if (tden == 0) // check for n/0
		{
			cout << "Illegal fraction : division by 0"; exit(1);
		}
		else if (tnum == 0) // check for 0/n
		{
			num = 0; den = 1; return;
		}
		// this ‘while’ loop finds the gcd of tnum and tden
		while (tnum != 0)
		{
			if (tnum < tden) // ensure numerator larger
			{
				temp = tnum; tnum = tden; tden = temp;
			} // swap them
			tnum = tnum - tden; // subtract them
		}
		gcd = tden; // this is greatest common divisor
		num = num / gcd; // divide both num and den by gcd
		den = den / gcd; // to reduce frac to lowest terms

		cout << num << '/' << den;
	}

private:
	int num;
	int den;
};

int main()
{
	fraction a, b;
	char awnser, sign;
	do
	{
		a.get();
		b.get();
		cout << "Enter the operation sign to continue" << endl;
		cin >> sign;
		switch (sign) {
		case '+':a.add(b);
			break;

		case '-':a.sub(b);
			break;

		case '*':a.mul(b);
			break;

		case '/':a.div(b);
			break;

		default:
			cout << "try again";
			break;
		}

		cout << "\nDo you want to continue? Y/N: ";
		cin >> awnser;
	} while (awnser == 'Y'|| awnser =='y');

	return 0;
}
